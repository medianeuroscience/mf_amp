'img_logo_AMP.stopped'=col_skip(),
"mask_logo_prac.started"=col_skip(),
"img_logo_AMP_trials.started"=col_skip(),
"img_logo_trial.stopped"=col_skip(),
"mask_logo_trial.started"=col_skip()))))
# # participant is participant ID in new data
# expdata <- expdata_full %>%
#   select(participant ID,
#          words,
#          mask,
#          corr_ans,
#          category,
#          nonwords,
#          tweets,
#          topic,
#          task,
#          keypress,
#          RT,
#          corr,
#          participant,
#          AMP_nonword_rating.response,
#          AMP_word_rating.response,
#          AMP_random_rating.response,
#          LDT_rating.response,
#          AMP_loop.thisN,
#          AMP_trials.thisN)
#
# # This function will check to see whether an observation is
# # an outlier based on median absolute deviation (MAD)
#
# out_mad <- function(x, thres = 3, na.rm = TRUE) {
#   abs(x - median(x, na.rm = na.rm)) >= thres * mad(x, na.rm = na.rm)
# }
#
# out_replace = function(dataframe, cols, rows, newValue = NA) {
#     if (any(rows)) {
#         set(dataframe, rows, cols, newValue)
#     }
# }
View(expdata_full)
surveydata = read.csv("amp_sym/surveydata.csv")
files = list.files(path ="amp_sym", pattern="^10.*.csv$", full.names = TRUE)
expdata_full = do.call(bind_rows,
lapply(files, function(x) read_csv(x, col_types = cols('img_logo_AMP_trials.stopped'=col_skip(),
'mask_AMP_2.started'=col_skip(),
'img_logo_prac.stopped'=col_skip(),
'resp_AMP_trials.started'=col_skip(),
'amp_prime_mask.stopped'=col_skip(),
'img_logo_AMP.stopped'=col_skip(),
"img_logo_AMP.started"=col_skip(),
'mask_AMP.started'=col_skip(),
"sym_resp_2.started" = col_skip(),
"resp_AMP.started" = col_skip(),
"AMP_key_reminder.started"=col_skip(),
"instr_sym11.started"=col_skip(),
'sym_layout_reminder.stopped'=col_skip(),
'AMP_key_reminder_2.started'=col_skip(),
'img_logo_AMP.stopped'=col_skip(),
"mask_logo_prac.started"=col_skip(),
"img_logo_AMP_trials.started"=col_skip(),
"img_logo_trial.stopped"=col_skip(),
"mask_logo_trial.started"=col_skip()))))
# participant is participant ID in new data
expdata <- expdata_full %>%
select(participant.ID,
words,
mask,
corr_ans,
category,
nonwords,
tweets,
topic,
task,
keypress,
RT,
corr)
#          participant,
#          AMP_nonword_rating.response,
#          AMP_word_rating.response,
#          AMP_random_rating.response,
#          LDT_rating.response,
#          AMP_loop.thisN,
#          AMP_trials.thisN)
#
# # This function will check to see whether an observation is
# # an outlier based on median absolute deviation (MAD)
#
# out_mad <- function(x, thres = 3, na.rm = TRUE) {
#   abs(x - median(x, na.rm = na.rm)) >= thres * mad(x, na.rm = na.rm)
# }
#
# out_replace = function(dataframe, cols, rows, newValue = NA) {
#     if (any(rows)) {
#         set(dataframe, rows, cols, newValue)
#     }
# }
surveydata = read.csv("amp_sym/surveydata.csv")
files = list.files(path ="amp_sym", pattern="^10.*.csv$", full.names = TRUE)
expdata_full = do.call(bind_rows,
lapply(files, function(x) read_csv(x, col_types = cols('img_logo_AMP_trials.stopped'=col_skip(),
'mask_AMP_2.started'=col_skip(),
'img_logo_prac.stopped'=col_skip(),
'resp_AMP_trials.started'=col_skip(),
'amp_prime_mask.stopped'=col_skip(),
'img_logo_AMP.stopped'=col_skip(),
"img_logo_AMP.started"=col_skip(),
'mask_AMP.started'=col_skip(),
"sym_resp_2.started" = col_skip(),
"resp_AMP.started" = col_skip(),
"AMP_key_reminder.started"=col_skip(),
"instr_sym11.started"=col_skip(),
'sym_layout_reminder.stopped'=col_skip(),
'AMP_key_reminder_2.started'=col_skip(),
'img_logo_AMP.stopped'=col_skip(),
"mask_logo_prac.started"=col_skip(),
"img_logo_AMP_trials.started"=col_skip(),
"img_logo_trial.stopped"=col_skip(),
"mask_logo_trial.started"=col_skip()))))
# participant is participant ID in new data
expdata <- expdata_full %>%
select(participant ID,
words,
mask,
corr_ans,
category,
nonwords,
tweets,
topic,
task,
keypress,
RT,
corr)
#          participant,
#          AMP_nonword_rating.response,
#          AMP_word_rating.response,
#          AMP_random_rating.response,
#          LDT_rating.response,
#          AMP_loop.thisN,
#          AMP_trials.thisN)
#
# # This function will check to see whether an observation is
# # an outlier based on median absolute deviation (MAD)
#
# out_mad <- function(x, thres = 3, na.rm = TRUE) {
#   abs(x - median(x, na.rm = na.rm)) >= thres * mad(x, na.rm = na.rm)
# }
#
# out_replace = function(dataframe, cols, rows, newValue = NA) {
#     if (any(rows)) {
#         set(dataframe, rows, cols, newValue)
#     }
# }
View(expdata_full)
expdata_full$`participant ID`
surveydata = read.csv("amp_sym/surveydata.csv")
files = list.files(path ="amp_sym", pattern="^10.*.csv$", full.names = TRUE)
expdata_full = do.call(bind_rows,
lapply(files, function(x) read_csv(x, col_types = cols('img_logo_AMP_trials.stopped'=col_skip(),
'mask_AMP_2.started'=col_skip(),
'img_logo_prac.stopped'=col_skip(),
'resp_AMP_trials.started'=col_skip(),
'amp_prime_mask.stopped'=col_skip(),
'img_logo_AMP.stopped'=col_skip(),
"img_logo_AMP.started"=col_skip(),
'mask_AMP.started'=col_skip(),
"sym_resp_2.started" = col_skip(),
"resp_AMP.started" = col_skip(),
"AMP_key_reminder.started"=col_skip(),
"instr_sym11.started"=col_skip(),
'sym_layout_reminder.stopped'=col_skip(),
'AMP_key_reminder_2.started'=col_skip(),
'img_logo_AMP.stopped'=col_skip(),
"mask_logo_prac.started"=col_skip(),
"img_logo_AMP_trials.started"=col_skip(),
"img_logo_trial.stopped"=col_skip(),
"mask_logo_trial.started"=col_skip()))))
# participant is participant ID in new data
expdata <- expdata_full %>%
select(participant ID)
#          participant,
#          AMP_nonword_rating.response,
#          AMP_word_rating.response,
#          AMP_random_rating.response,
#          LDT_rating.response,
#          AMP_loop.thisN,
#          AMP_trials.thisN)
#
# # This function will check to see whether an observation is
# # an outlier based on median absolute deviation (MAD)
#
# out_mad <- function(x, thres = 3, na.rm = TRUE) {
#   abs(x - median(x, na.rm = na.rm)) >= thres * mad(x, na.rm = na.rm)
# }
#
# out_replace = function(dataframe, cols, rows, newValue = NA) {
#     if (any(rows)) {
#         set(dataframe, rows, cols, newValue)
#     }
# }
surveydata = read.csv("amp_sym/surveydata.csv")
files = list.files(path ="amp_sym", pattern="^10.*.csv$", full.names = TRUE)
expdata_full = do.call(bind_rows,
lapply(files, function(x) read_csv(x, col_types = cols('img_logo_AMP_trials.stopped'=col_skip(),
'mask_AMP_2.started'=col_skip(),
'img_logo_prac.stopped'=col_skip(),
'resp_AMP_trials.started'=col_skip(),
'amp_prime_mask.stopped'=col_skip(),
'img_logo_AMP.stopped'=col_skip(),
"img_logo_AMP.started"=col_skip(),
'mask_AMP.started'=col_skip(),
"sym_resp_2.started" = col_skip(),
"resp_AMP.started" = col_skip(),
"AMP_key_reminder.started"=col_skip(),
"instr_sym11.started"=col_skip(),
'sym_layout_reminder.stopped'=col_skip(),
'AMP_key_reminder_2.started'=col_skip(),
'img_logo_AMP.stopped'=col_skip(),
"mask_logo_prac.started"=col_skip(),
"img_logo_AMP_trials.started"=col_skip(),
"img_logo_trial.stopped"=col_skip(),
"mask_logo_trial.started"=col_skip()))))
# participant is participant ID in new data
expdata <- expdata_full %>%
select(words)
#          participant,
#          AMP_nonword_rating.response,
#          AMP_word_rating.response,
#          AMP_random_rating.response,
#          LDT_rating.response,
#          AMP_loop.thisN,
#          AMP_trials.thisN)
#
# # This function will check to see whether an observation is
# # an outlier based on median absolute deviation (MAD)
#
# out_mad <- function(x, thres = 3, na.rm = TRUE) {
#   abs(x - median(x, na.rm = na.rm)) >= thres * mad(x, na.rm = na.rm)
# }
#
# out_replace = function(dataframe, cols, rows, newValue = NA) {
#     if (any(rows)) {
#         set(dataframe, rows, cols, newValue)
#     }
# }
View(expdata)
surveydata = read.csv("amp_sym/surveydata.csv")
files = list.files(path ="amp_sym", pattern="^10.*.csv$", full.names = TRUE)
expdata_full = do.call(bind_rows,
lapply(files, function(x) read_csv(x, col_types = cols('img_logo_AMP_trials.stopped'=col_skip(),
'mask_AMP_2.started'=col_skip(),
'img_logo_prac.stopped'=col_skip(),
'resp_AMP_trials.started'=col_skip(),
'amp_prime_mask.stopped'=col_skip(),
'img_logo_AMP.stopped'=col_skip(),
"img_logo_AMP.started"=col_skip(),
'mask_AMP.started'=col_skip(),
"sym_resp_2.started" = col_skip(),
"resp_AMP.started" = col_skip(),
"AMP_key_reminder.started"=col_skip(),
"instr_sym11.started"=col_skip(),
'sym_layout_reminder.stopped'=col_skip(),
'AMP_key_reminder_2.started'=col_skip(),
'img_logo_AMP.stopped'=col_skip(),
"mask_logo_prac.started"=col_skip(),
"img_logo_AMP_trials.started"=col_skip(),
"img_logo_trial.stopped"=col_skip(),
"mask_logo_trial.started"=col_skip()))))
# participant is participant ID in new data
expdata <- expdata_full %>%
select(words,`participant ID`)
#          participant,
#          AMP_nonword_rating.response,
#          AMP_word_rating.response,
#          AMP_random_rating.response,
#          LDT_rating.response,
#          AMP_loop.thisN,
#          AMP_trials.thisN)
#
# # This function will check to see whether an observation is
# # an outlier based on median absolute deviation (MAD)
#
# out_mad <- function(x, thres = 3, na.rm = TRUE) {
#   abs(x - median(x, na.rm = na.rm)) >= thres * mad(x, na.rm = na.rm)
# }
#
# out_replace = function(dataframe, cols, rows, newValue = NA) {
#     if (any(rows)) {
#         set(dataframe, rows, cols, newValue)
#     }
# }
View(expdata)
surveydata = read.csv("amp_sym/surveydata.csv")
files = list.files(path ="amp_sym", pattern="^10.*.csv$", full.names = TRUE)
expdata_full = do.call(bind_rows,
lapply(files, function(x) read_csv(x, col_types = cols('img_logo_AMP_trials.stopped'=col_skip(),
'mask_AMP_2.started'=col_skip(),
'img_logo_prac.stopped'=col_skip(),
'resp_AMP_trials.started'=col_skip(),
'amp_prime_mask.stopped'=col_skip(),
'img_logo_AMP.stopped'=col_skip(),
"img_logo_AMP.started"=col_skip(),
'mask_AMP.started'=col_skip(),
"sym_resp_2.started" = col_skip(),
"resp_AMP.started" = col_skip(),
"AMP_key_reminder.started"=col_skip(),
"instr_sym11.started"=col_skip(),
'sym_layout_reminder.stopped'=col_skip(),
'AMP_key_reminder_2.started'=col_skip(),
'img_logo_AMP.stopped'=col_skip(),
"mask_logo_prac.started"=col_skip(),
"img_logo_AMP_trials.started"=col_skip(),
"img_logo_trial.stopped"=col_skip(),
"mask_logo_trial.started"=col_skip()))))
# participant is participant ID in new data
expdata <- expdata_full %>%
select(`participant ID`,
words,
mask,
corr_ans,
category,
nonwords,
tweets,
topic,
task,
keypress,
RT,
corr)
#          participant,
#          AMP_nonword_rating.response,
#          AMP_word_rating.response,
#          AMP_random_rating.response,
#          LDT_rating.response,
#          AMP_loop.thisN,
#          AMP_trials.thisN)
#
# # This function will check to see whether an observation is
# # an outlier based on median absolute deviation (MAD)
#
# out_mad <- function(x, thres = 3, na.rm = TRUE) {
#   abs(x - median(x, na.rm = na.rm)) >= thres * mad(x, na.rm = na.rm)
# }
#
# out_replace = function(dataframe, cols, rows, newValue = NA) {
#     if (any(rows)) {
#         set(dataframe, rows, cols, newValue)
#     }
# }
surveydata = read.csv("amp_sym/surveydata.csv")
files = list.files(path ="amp_sym", pattern="^10.*.csv$", full.names = TRUE)
expdata_full = do.call(bind_rows,
lapply(files, function(x) read_csv(x, col_types = cols('img_logo_AMP_trials.stopped'=col_skip(),
'mask_AMP_2.started'=col_skip(),
'img_logo_prac.stopped'=col_skip(),
'resp_AMP_trials.started'=col_skip(),
'amp_prime_mask.stopped'=col_skip(),
'img_logo_AMP.stopped'=col_skip(),
"img_logo_AMP.started"=col_skip(),
'mask_AMP.started'=col_skip(),
"sym_resp_2.started" = col_skip(),
"resp_AMP.started" = col_skip(),
"AMP_key_reminder.started"=col_skip(),
"instr_sym11.started"=col_skip(),
'sym_layout_reminder.stopped'=col_skip(),
'AMP_key_reminder_2.started'=col_skip(),
'img_logo_AMP.stopped'=col_skip(),
"mask_logo_prac.started"=col_skip(),
"img_logo_AMP_trials.started"=col_skip(),
"img_logo_trial.stopped"=col_skip(),
"mask_logo_trial.started"=col_skip()))))
# participant is participant ID in new data
expdata <- expdata_full %>%
select(`participant ID`,
words,
mask,
corr_ans,
category,
tweets,
topic,
task,
keypress,
RT,
corr)
#          participant,
#          AMP_nonword_rating.response,
#          AMP_word_rating.response,
#          AMP_random_rating.response,
#          LDT_rating.response,
#          AMP_loop.thisN,
#          AMP_trials.thisN)
#
# # This function will check to see whether an observation is
# # an outlier based on median absolute deviation (MAD)
#
# out_mad <- function(x, thres = 3, na.rm = TRUE) {
#   abs(x - median(x, na.rm = na.rm)) >= thres * mad(x, na.rm = na.rm)
# }
#
# out_replace = function(dataframe, cols, rows, newValue = NA) {
#     if (any(rows)) {
#         set(dataframe, rows, cols, newValue)
#     }
# }
surveydata = read.csv("amp_sym/surveydata.csv")
files = list.files(path ="amp_sym", pattern="^10.*.csv$", full.names = TRUE)
expdata_full = do.call(bind_rows,
lapply(files, function(x) read_csv(x, col_types = cols('img_logo_AMP_trials.stopped'=col_skip(),
'mask_AMP_2.started'=col_skip(),
'img_logo_prac.stopped'=col_skip(),
'resp_AMP_trials.started'=col_skip(),
'amp_prime_mask.stopped'=col_skip(),
'img_logo_AMP.stopped'=col_skip(),
"img_logo_AMP.started"=col_skip(),
'mask_AMP.started'=col_skip(),
"sym_resp_2.started" = col_skip(),
"resp_AMP.started" = col_skip(),
"AMP_key_reminder.started"=col_skip(),
"instr_sym11.started"=col_skip(),
'sym_layout_reminder.stopped'=col_skip(),
'AMP_key_reminder_2.started'=col_skip(),
'img_logo_AMP.stopped'=col_skip(),
"mask_logo_prac.started"=col_skip(),
"img_logo_AMP_trials.started"=col_skip(),
"img_logo_trial.stopped"=col_skip(),
"mask_logo_trial.started"=col_skip()))))
# participant is participant ID in new data
expdata <- expdata_full %>%
select(`participant ID`,
words,
mask,
corr_ans,
category,
task,
keypress,
RT,
corr)
#          participant,
#          AMP_nonword_rating.response,
#          AMP_word_rating.response,
#          AMP_random_rating.response,
#          LDT_rating.response,
#          AMP_loop.thisN,
#          AMP_trials.thisN)
#
# # This function will check to see whether an observation is
# # an outlier based on median absolute deviation (MAD)
#
# out_mad <- function(x, thres = 3, na.rm = TRUE) {
#   abs(x - median(x, na.rm = na.rm)) >= thres * mad(x, na.rm = na.rm)
# }
#
# out_replace = function(dataframe, cols, rows, newValue = NA) {
#     if (any(rows)) {
#         set(dataframe, rows, cols, newValue)
#     }
# }
View(expdata)
View(expdata_full)
View(expdata_full)
surveydata = read.csv("amp_sym/surveydata.csv")
files = list.files(path ="amp_sym", pattern="^10.*.csv$", full.names = TRUE)
expdata_full = do.call(bind_rows,
lapply(files, function(x) read_csv(x, col_types = cols('img_logo_AMP_trials.stopped'=col_skip(),
'mask_AMP_2.started'=col_skip(),
'img_logo_prac.stopped'=col_skip(),
'resp_AMP_trials.started'=col_skip(),
'amp_prime_mask.stopped'=col_skip(),
'img_logo_AMP.stopped'=col_skip(),
"img_logo_AMP.started"=col_skip(),
'mask_AMP.started'=col_skip(),
"sym_resp_2.started" = col_skip(),
"resp_AMP.started" = col_skip(),
"AMP_key_reminder.started"=col_skip(),
"instr_sym11.started"=col_skip(),
'sym_layout_reminder.stopped'=col_skip(),
'AMP_key_reminder_2.started'=col_skip(),
'img_logo_AMP.stopped'=col_skip(),
"mask_logo_prac.started"=col_skip(),
"img_logo_AMP_trials.started"=col_skip(),
"img_logo_trial.stopped"=col_skip(),
"mask_logo_trial.started"=col_skip()))))
# participant is participant ID in new data
expdata <- expdata_full %>%
select(`participant ID`,
words,
mask,
corr_ans,
category,
task,
symbols,
keypress,
RT,
corr)
#          participant,
#          AMP_nonword_rating.response,
#          AMP_word_rating.response,
#          AMP_random_rating.response,
#          LDT_rating.response,
#          AMP_loop.thisN,
#          AMP_trials.thisN)
#
# # This function will check to see whether an observation is
# # an outlier based on median absolute deviation (MAD)
#
# out_mad <- function(x, thres = 3, na.rm = TRUE) {
#   abs(x - median(x, na.rm = na.rm)) >= thres * mad(x, na.rm = na.rm)
# }
#
# out_replace = function(dataframe, cols, rows, newValue = NA) {
#     if (any(rows)) {
#         set(dataframe, rows, cols, newValue)
#     }
# }
