tweets,
topic,
task,
keypress,
RT,
corr,
participant,
AMP_nonword_rating.response,
AMP_word_rating.response,
AMP_random_rating.response,
LDT_rating.response,
AMP_loop.thisN,
AMP_trials.thisN)
# This function will check to see whether an observation is
# an outlier based on median absolute deviation (MAD)
out_mad <- function(x, thres = 3, na.rm = TRUE) {
abs(x - median(x, na.rm = na.rm)) >= thres * mad(x, na.rm = na.rm)
}
out_replace = function(dataframe, cols, rows, newValue = NA) {
if (any(rows)) {
set(dataframe, rows, cols, newValue)
}
}
surveydata = read.csv("data/surveydata.csv")
files = list.files(path ="data", pattern="^10.*.csv$", full.names = TRUE)
expdata_full = do.call(bind_rows,
lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE)))
expdata <- expdata_full %>%
select(participant,
words,
mask,
corr_ans,
category,
nonwords,
tweets,
topic,
task,
keypress,
RT,
corr,
participant,
AMP_nonword_rating.response,
AMP_word_rating.response,
AMP_random_rating.response,
LDT_rating.response,
AMP_loop.thisN,
AMP_trials.thisN)
# This function will check to see whether an observation is
# an outlier based on median absolute deviation (MAD)
out_mad <- function(x, thres = 3, na.rm = TRUE) {
abs(x - median(x, na.rm = na.rm)) >= thres * mad(x, na.rm = na.rm)
}
out_replace = function(dataframe, cols, rows, newValue = NA) {
if (any(rows)) {
set(dataframe, rows, cols, newValue)
}
}
getcwd()
cwd()
getwd
getwd()
setwd("~Dropbox/project/inprogress/mf_amp/analysis")
setwd("~Dropbox/projects/inprogress/mf_amp/analysis")
setwd("~Dropbox/projects/inprogress/mf_amp/")
setwd("~/Dropbox/projects/inprogress/mf_amp/")
setwd("~/Dropbox/projects/inprogress/mf_amp/analysis")
surveydata = read.csv("data/surveydata.csv")
files = list.files(path ="data", pattern="^10.*.csv$", full.names = TRUE)
expdata_full = do.call(bind_rows,
lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE)))
expdata <- expdata_full %>%
select(participant,
words,
mask,
corr_ans,
category,
nonwords,
tweets,
topic,
task,
keypress,
RT,
corr,
participant,
AMP_nonword_rating.response,
AMP_word_rating.response,
AMP_random_rating.response,
LDT_rating.response,
AMP_loop.thisN,
AMP_trials.thisN)
# This function will check to see whether an observation is
# an outlier based on median absolute deviation (MAD)
out_mad <- function(x, thres = 3, na.rm = TRUE) {
abs(x - median(x, na.rm = na.rm)) >= thres * mad(x, na.rm = na.rm)
}
out_replace = function(dataframe, cols, rows, newValue = NA) {
if (any(rows)) {
set(dataframe, rows, cols, newValue)
}
}
# Chunk 1: importing packages
library(knitr)
library(tidyverse)
library(gridExtra)
library(ggridges)
opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE,
results = 'show',
tidy.opts=list(width.cutoff=60),tidy=TRUE)
# Chunk 2: importing data and defining functions
surveydata = read.csv("data/surveydata.csv")
files = list.files(path ="data", pattern="^10.*.csv$", full.names = TRUE)
expdata_full = do.call(bind_rows,
lapply(files, function(x) read.csv(x, stringsAsFactors = FALSE)))
expdata <- expdata_full %>%
select(participant,
words,
mask,
corr_ans,
category,
nonwords,
tweets,
topic,
task,
keypress,
RT,
corr,
participant,
AMP_nonword_rating.response,
AMP_word_rating.response,
AMP_random_rating.response,
LDT_rating.response,
AMP_loop.thisN,
AMP_trials.thisN)
# This function will check to see whether an observation is
# an outlier based on median absolute deviation (MAD)
out_mad <- function(x, thres = 3, na.rm = TRUE) {
abs(x - median(x, na.rm = na.rm)) >= thres * mad(x, na.rm = na.rm)
}
out_replace = function(dataframe, cols, rows, newValue = NA) {
if (any(rows)) {
set(dataframe, rows, cols, newValue)
}
}
# Chunk 3
expdata_w <- expdata %>%
mutate(corr = ifelse(corr == 1, 0,
ifelse(corr == 0, 1, NA)),
wordcat = ifelse(category == "neutral", "neutral",
ifelse(category == "nonword", "nonword",
ifelse(!is.na(category), "moralword", NA))))
expdata_w <- expdata_w %>%
separate(category, c("foundation", "valence"), "[.]") %>%
mutate(valence = ifelse(foundation == "control" & words == "pleasant", "positive",
ifelse(foundation == "control" & words == "unpleasant", "negative",
ifelse(foundation == "nonword", "nonword",
ifelse(valence == "virtue", "positive",
ifelse(valence == "vice", "negative", NA))))))
expdata_w <- expdata_w %>%
mutate(trialnum = coalesce(AMP_loop.thisN, AMP_trials.thisN))
expdata_w <- expdata_w %>%
mutate_at(vars(participant), funs(as.factor))
# Chunk 4
AMP_trials <- expdata_w %>% filter(task == "AMP")
LDT_trials <- expdata_w %>% filter(task == "LDT")
AMP_trials %>% group_by(participant) %>% summarize(n = n())
LDT_trials %>% group_by(participant) %>% summarize(n = n())
# Chunk 5: rating responses
df <- expdata_w %>%
select(participant,
AMP_nonword_rating.response,
AMP_word_rating.response,
AMP_random_rating.response,
LDT_rating.response) %>%
group_by(participant) %>%
summarize(AMP_word = mean(AMP_word_rating.response, na.rm=TRUE),
AMP_nonword = mean(AMP_nonword_rating.response, na.rm=TRUE),
AMP_random = mean(AMP_random_rating.response, na.rm=TRUE),
LDT_random = mean(LDT_rating.response, na.rm=TRUE))
plot_data <- df %>% gather("task", "response", -participant)
ggplot(plot_data, aes(x = response, y = ..count..)) +
geom_bar(position = "dodge") +
scale_x_continuous(breaks=1:7,labels=c("not at all",
"","",
"somewhat",
"","",
"completely")) +
scale_fill_discrete(labels=c("AMP judgment based on targets",
"AMP judgment based on primes",
"AMP responded randomly",
"LDT responded randomly")) +
labs(title = "Post-task Responses") + facet_wrap(. ~ task)
df %>%
select(participant, LDT_random, AMP_random) %>%
filter(AMP_random == 7 | LDT_random == 7)
# Chunk 6: press proportions
df1 <- expdata_w %>% filter(task == "LDT" | task == "AMP") %>%
group_by(participant, task, keypress) %>%
summarize(n = n())
df1 <- df1 %>% spread(keypress, n) %>%
summarize(ratio = left/right)
median(df1$ratio) + 3 * sd(df1$ratio)
# Chunk 7: LDT accuracy
LDT_trials <- expdata_w %>%
group_by(participant) %>%
mutate(LDT_random = mean(LDT_rating.response, na.rm=TRUE)) %>%
ungroup() %>%
filter(task == "LDT") %>%
group_by(participant) %>%
summarize(corr = mean(corr, na.rm=TRUE))
#Let's see if there are any participants who are correctness outliers.
df_indouts <- LDT_trials %>%
select(participant, corr) %>%
mutate_if(is.numeric, funs(mad = out_mad))
table(df_indouts$mad)
# Chunk 8
LDT_trials <- expdata_w %>%
group_by(words) %>%
filter(task == "LDT") %>%
summarize(corr = mean(corr, na.rm=TRUE))
df <- LDT_trials %>% group_by(words) %>% summarize(corr = mean(corr), n = n())
df_wordouts <- df %>%
select(words, corr, n) %>%
mutate_if(is.numeric, funs(mad = out_mad))
table(df_wordouts$corr_mad)
# Chunk 9: reaction times
df <- expdata_w %>% filter(task == "AMP" | task == "LDT")
ggplot(df, aes(x = RT)) + geom_histogram()
# Chunk 10
df_indouts <- df %>%
group_by(participant, task) %>%
select(participant,
RT,
foundation,
valence,
wordcat,
task,
words,
corr,
trialnum,
nonwords,
keypress) %>%
mutate_if(is.numeric, funs(mad = out_mad))
# Filtering based on that column
expdata_rtfilt <- filter(df_indouts, RT_mad == FALSE)
# Additionally replacing RTs less than 100msec with 100msec, following Whelan (2008)
expdata_rtfilt <- expdata_rtfilt %>%
mutate(RT = ifelse(RT <= .1, .1, RT))
ggplot(expdata_rtfilt, aes(x = RT)) + geom_histogram()
# Chunk 11
df_groupouts <- df %>%
group_by(participant, task) %>%
summarize(meanrt = mean(RT, na.rm=TRUE)) %>%
ungroup() %>%
group_by(task) %>%
select(participant,
task,
meanrt) %>%
mutate_if(is.numeric, funs(mad = out_mad))
# Chunk 12
# First, let's look at neutral words vs. nonwords vs. moral words
plt_data <- expdata_rtfilt %>%
filter(task == "LDT" & wordcat != "nonword") %>%
group_by(participant, wordcat) %>%
mutate(meanrt = mean(RT)) %>%
group_by(participant, wordcat) %>%
summarize(wordrt = mean(RT),
corr = mean(corr),
n = n()) %>%
ungroup()
plt_data %>% do(broom::tidy(t.test(corr~wordcat, data=.)))
# Box plot of correctness by category
plt1 <- ggplot(plt_data, aes(x = wordcat, y = corr, fill = wordcat)) +
geom_boxplot() + coord_flip() + labs(title = "Response Correctness by Category", x = "Word Category", y = "Mean Correctness") + theme_minimal() + theme(legend.title=element_blank())
# Density plot of correctness by category
plt2 <- ggplot(plt_data, aes(x = corr, fill = wordcat, color = wordcat)) +
geom_density(alpha = .8) + labs(title = "Response Correctness by Category", x = "Mean Correctness") + theme_minimal() + theme(legend.title=element_blank())
# Boxplot of RT by category
plt3 <- ggplot(plt_data, aes(x = wordcat, y = meanrt, fill = wordcat)) +
geom_boxplot() + coord_flip() + labs(title = "Reaction Times by Category", x = "Word Category", y = "Mean Reaction Time") + theme_minimal() + theme(legend.title=element_blank())
#Density plot of RT by category
plt4 <- ggplot(plt_data, aes(x = meanrt, fill = wordcat, color = wordcat)) +
geom_density(alpha = .8) + labs(title = "Reaction Times by Category", x = "Mean Reaction Time") + theme_minimal() + theme(legend.title=element_blank())
grid.arrange(plt1, plt2, plt3, plt4)
# Importing the weights to see how they correlate with response times and accuracy.
weights = read.csv("data/mfd_weights.csv")
weights <- weights %>%
select(-X) %>%
rename(words = word)
LDT_words <- expdata_rtfilt %>%
filter(task == "LDT" & wordcat == "moralword") %>%
group_by(words) %>%
summarize(meancorr = mean(corr),
meanrt = mean(RT),
cat = paste(unique(foundation), collapse = ', '),
val = paste(unique(valence), collapse = ', '))
LDT_weighted <- left_join(LDT_words, weights, by = "words")
plot_data <- filter(LDT_weighted, !is.na(weight))
ggplot(plot_data, aes(x = weight, y = meancorr)) +
geom_point() +
geom_smooth(method='lm',formula=y~x, se=F)
ggplot(plot_data, aes(x = weight, y = meanrt)) +
geom_point() +
geom_smooth(method='lm',formula=y~x, se=F)
# Looks like nothing really going on here.
# Chunk 13: AMP gathering
AMP_trials <- AMP_trials %>%
mutate(subnum = participant) %>%
unite("sub_trial", "subnum", "trialnum", sep = "_")
AMP_trials_long <- AMP_trials %>%
rename("prime_cat" = "wordcat",
"prime_foundation" = "foundation",
"prime_val" = "valence") %>%
gather("prime_target", "words", "words", "nonwords") %>%
mutate(prime_target = ifelse(prime_target == "words", "prime",
ifelse(prime_target == "nonwords", "target", NA)),
val_response = ifelse(keypress == "left", -1, 1),
prime_val = ifelse(is.na(prime_val), "nonword", prime_val)) %>%
arrange(by = sub_trial)
# Chunk 14
plot_data <- AMP_trials_long %>%
group_by(participant) %>%
mutate(meanRT = mean(RT)) %>%
ungroup() %>%
#filter(!(prime_foundation %in% c("control", "nonword"))) %>%
group_by(prime_val) %>%
filter(prime_target == "prime") %>%
summarize(mean_val_response = mean(val_response), rt = mean(RT), meanRT = mean(meanRT)) %>%
mutate(phi = (1/(rt/meanRT)) * mean_val_response) %>%
ungroup()
plot_data %>% do(broom::tidy(t.test(mean_val_response~prime_val, data=.)))
p1 <- ggplot(plot_data, aes(x = mean_val_response, fill = prime_val, color = prime_val)) +
geom_density(alpha = .8) +
labs(title = "Mean valence of responses by prime category",
x = "Valence",
y = "Density")
p2 <- ggplot(plot_data, aes(x = rt, fill = prime_val, color = prime_val)) +
geom_density(alpha = .8) +
labs(title = "Mean RT of responses by prime category",
x = "RT",
y = "Density")
p3 <- ggplot(plot_data, aes(x = phi, fill = prime_val, color = prime_val)) +
geom_density(alpha = .8) +
labs(title = "Salience of responses by prime category (phi)",
x = "Salience",
y = "Density")
grid.arrange(p1, p2, p3, ncol = 2)
# Chunk 15
plot_data <- AMP_trials_long %>% group_by(words, prime_foundation, prime_val) %>%
filter(prime_target == "prime") %>%
summarize(mean_val_response = mean(val_response), meanrt = mean(RT), n = n())
ggplot(plot_data, aes(x = mean_val_response,
y = prime_foundation,
fill = prime_val,
color = prime_val)) +
geom_density_ridges(alpha = .8,
scale = .9,
jittered_points = TRUE,
position = "raincloud") +
scale_fill_manual(values=c("#FF6C67", "#00B2FD", "#00BE0D")) +
scale_color_manual(values=c("#FF6C67", "#00B2FD", "#00BE0D")) +
labs(title = "Mean salience of responses by foundation",
x = "Salience",
y = "Density")
AMP_weights <- left_join(AMP_trials_long, weights, by = "words")
plot_data <- AMP_weights %>%
filter(prime_cat == "moralword" & prime_target == "prime" & !is.na(weight)) %>%
group_by(participant) %>%
mutate(meanrt = mean(RT)) %>%
ungroup() %>%
group_by(participant, words, prime_val) %>%
summarize(meanval = mean(val_response),
weights = mean(weight, na.rm=TRUE),
rt = mean(RT),
meanrt = mean(meanrt)) %>%
mutate(phi = (1/(rt/meanrt)) * meanval) %>%
ungroup() %>%
group_by(words, prime_val) %>%
summarize(phi = mean(phi), meanval = mean(meanval), weights = mean(weights))
ggplot(plot_data, aes(x = weights, y = meanval, color = prime_val)) +
geom_point() + geom_smooth(method = "lm", formula = y ~ x) + labs(title = "Correlation Between E-MFD Weighting and MF-AMP Responses", x = "E-MFD Weights", y = "Mean Reported Valence") + theme_minimal() + theme(legend.title=element_blank())
df <- plot_data %>% filter(prime_val == "negative")
Hmisc::rcorr(df$meanval, df$weights)
df <- plot_data %>% filter(prime_val == "positive")
Hmisc::rcorr(df$meanval, df$weights)
AMP_weights <- left_join(AMP_trials_long, weights, by = "words")
plot_data <- AMP_weights %>%
filter(prime_cat == "moralword" & prime_target == "prime" & !is.na(weight)) %>%
group_by(participant) %>%
mutate(meanrt = mean(RT)) %>%
ungroup() %>%
group_by(participant, words, prime_val) %>%
summarize(meanval = mean(val_response),
weights = mean(weight, na.rm=TRUE),
rt = mean(RT),
meanrt = mean(meanrt)) %>%
mutate(phi = (1/(rt/meanrt)) * meanval) %>%
ungroup() %>%
group_by(words, prime_val) %>%
summarize(phi = mean(phi), meanval = mean(meanval), weights = mean(weights))
ggplot(plot_data, aes(x = weights, y = meanval, color = prime_val)) +
geom_point() + geom_smooth(method = "lm", formula = y ~ x) + labs(title = "Correlation Between E-MFD Weighting and MF-AMP Responses", x = "E-MFD Weights", y = "Mean Reported Valence") + ggthemes::theme_few() + theme(legend.title=element_blank())
df <- plot_data %>% filter(prime_val == "negative")
Hmisc::rcorr(df$meanval, df$weights)
df <- plot_data %>% filter(prime_val == "positive")
Hmisc::rcorr(df$meanval, df$weights)
AMP_weights <- left_join(AMP_trials_long, weights, by = "words")
plot_data <- AMP_weights %>%
filter(prime_cat == "moralword" & prime_target == "prime" & !is.na(weight)) %>%
group_by(participant) %>%
mutate(meanrt = mean(RT)) %>%
ungroup() %>%
group_by(participant, words, prime_val) %>%
summarize(meanval = mean(val_response),
weights = mean(weight, na.rm=TRUE),
rt = mean(RT),
meanrt = mean(meanrt)) %>%
mutate(phi = (1/(rt/meanrt)) * meanval) %>%
ungroup() %>%
group_by(words, prime_val) %>%
summarize(phi = mean(phi), meanval = mean(meanval), weights = mean(weights))
ggplot(plot_data, aes(x = weights, y = meanval, color = prime_val)) +
geom_point() + geom_smooth(method = "lm", formula = y ~ x) + labs(title = "Correlation Between E-MFD Weighting and MF-AMP Responses", x = "E-MFD Weights", y = "Mean Reported Valence") + ggthemes::theme_few() + theme(legend.title=element_blank())
df <- plot_data %>% filter(prime_val == "negative")
Hmisc::rcorr(df$meanval, df$weights)
df <- plot_data %>% filter(prime_val == "positive")
Hmisc::rcorr(df$meanval, df$weights)
install.packages(ggthemes)
install.packages("ggthemes")
AMP_weights <- left_join(AMP_trials_long, weights, by = "words")
plot_data <- AMP_weights %>%
filter(prime_cat == "moralword" & prime_target == "prime" & !is.na(weight)) %>%
group_by(participant) %>%
mutate(meanrt = mean(RT)) %>%
ungroup() %>%
group_by(participant, words, prime_val) %>%
summarize(meanval = mean(val_response),
weights = mean(weight, na.rm=TRUE),
rt = mean(RT),
meanrt = mean(meanrt)) %>%
mutate(phi = (1/(rt/meanrt)) * meanval) %>%
ungroup() %>%
group_by(words, prime_val) %>%
summarize(phi = mean(phi), meanval = mean(meanval), weights = mean(weights))
ggplot(plot_data, aes(x = weights, y = meanval, color = prime_val)) +
geom_point() + geom_smooth(method = "lm", formula = y ~ x) + labs(title = "Correlation Between E-MFD Weighting and MF-AMP Responses", x = "E-MFD Weights", y = "Mean Reported Valence") + ggthemes::theme_few() + theme(legend.title=element_blank())
df <- plot_data %>% filter(prime_val == "negative")
Hmisc::rcorr(df$meanval, df$weights)
df <- plot_data %>% filter(prime_val == "positive")
Hmisc::rcorr(df$meanval, df$weights)
AMP_weights <- left_join(AMP_trials_long, weights, by = "words")
plot_data <- AMP_weights %>%
filter(prime_cat == "moralword" & prime_target == "prime" & !is.na(weight)) %>%
group_by(participant) %>%
mutate(meanrt = mean(RT)) %>%
ungroup() %>%
group_by(participant, words, prime_val) %>%
summarize(meanval = mean(val_response),
weights = mean(weight, na.rm=TRUE),
rt = mean(RT),
meanrt = mean(meanrt)) %>%
mutate(phi = (1/(rt/meanrt)) * meanval) %>%
ungroup() %>%
group_by(words, prime_val) %>%
summarize(phi = mean(phi), meanval = mean(meanval), weights = mean(weights)) + xlim(0, .03)
ggplot(plot_data, aes(x = weights, y = meanval, color = prime_val)) +
geom_point() + geom_smooth(method = "lm", formula = y ~ x) + labs(title = "Correlation Between E-MFD Weighting and MF-AMP Responses", x = "E-MFD Weights", y = "Mean Reported Valence") + ggthemes::theme_few() + theme(legend.title=element_blank())
df <- plot_data %>% filter(prime_val == "negative")
Hmisc::rcorr(df$meanval, df$weights)
df <- plot_data %>% filter(prime_val == "positive")
Hmisc::rcorr(df$meanval, df$weights)
ggplot(plot_data, aes(x = weights, y = meanval, color = prime_val)) +
geom_point() + geom_smooth(method = "lm", formula = y ~ x) + labs(title = "Correlation Between E-MFD Weighting and MF-AMP Responses", x = "E-MFD Weights", y = "Mean Reported Valence") + ggthemes::theme_few() + theme(legend.title=element_blank()) + xlim(0, .03)
ggplot(plot_data, aes(x = weights, y = meanval, color = prime_val)) +
geom_point() + geom_smooth(method = "lm", formula = y ~ x) + labs(title = "Correlation Between E-MFD Weighting and MF-AMP Responses", x = "E-MFD Weights", y = "Mean Reported Valence") + ggthemes::theme_few() + theme(legend.title=element_blank()) + xlim(0, .018)
ggplot(plot_data, aes(x = weights, y = meanval, color = prime_val)) +
geom_point() + geom_smooth(method = "lm", formula = y ~ x) + labs(title = "Correlation Between E-MFD Weighting and MF-AMP Responses", x = "E-MFD Weights", y = "Mean Reported Valence") + ggthemes::theme_few() + theme(legend.title=element_blank()) + xlim(0, .019)
ggplot(plot_data, aes(x = weights, y = meanval, color = prime_val)) +
geom_point() + geom_smooth(method = "lm", formula = y ~ x) + labs(title = "Correlation Between E-MFD Weighting and MF-AMP Responses", x = "E-MFD Weights", y = "Mean Reported Valence") + ggthemes::theme_few() + theme(legend.title=element_blank()) + xlim(0, .018)
ggplot(plot_data, aes(x = weights, y = meanval, color = prime_val)) +
geom_point() + geom_smooth(method = "lm", formula = y ~ x) + labs(title = "Correlation Between E-MFD Weighting and MF-AMP Responses", x = "E-MFD Weights", y = "Mean Reported Valence") + ggthemes::theme_few() + theme(legend.title=element_blank()) + xlim(.002, .018)
ggplot(plot_data, aes(x = weights, y = meanval, color = prime_val)) +
geom_point() + geom_smooth(method = "lm", formula = y ~ x) + labs(title = "Correlation Between E-MFD Weighting and MF-AMP Responses", x = "E-MFD Weights", y = "Mean Reported Valence") + ggthemes::theme_few() + theme(legend.title=element_blank()) + xlim(.002, .017)
AMP_weights <- left_join(AMP_trials_long, weights, by = "words")
plot_data <- AMP_weights %>%
filter(prime_cat == "moralword" & prime_target == "prime" & !is.na(weight)) %>%
group_by(participant) %>%
mutate(meanrt = mean(RT)) %>%
ungroup() %>%
group_by(participant, words, prime_val) %>%
summarize(meanval = mean(val_response),
weights = mean(weight, na.rm=TRUE),
rt = mean(RT),
meanrt = mean(meanrt)) %>%
mutate(phi = (1/(rt/meanrt)) * meanval) %>%
ungroup() %>%
group_by(words, prime_val) %>%
summarize(phi = mean(phi), meanval = mean(meanval), weights = mean(weights)) %>% mutate(prime_val = recode(prime_val, "negative" = "Vice", "positive" = "Virtue"))
ggplot(plot_data, aes(x = weights, y = meanval, color = prime_val)) +
geom_point() + geom_smooth(method = "lm", formula = y ~ x) + labs(title = "Correlation Between E-MFD Weighting and MF-AMP Responses", x = "E-MFD Weights", y = "Mean Reported Valence") + ggthemes::theme_few() + theme(legend.title=element_blank()) + xlim(.002, .017)
df <- plot_data %>% filter(prime_val == "negative")
Hmisc::rcorr(df$meanval, df$weights)
df <- plot_data %>% filter(prime_val == "positive")
Hmisc::rcorr(df$meanval, df$weights)
plt <- ggplot(plot_data, aes(x = weights, y = meanval, color = prime_val)) +
geom_point() + geom_smooth(method = "lm", formula = y ~ x) + labs(title = "Correlation Between E-MFD Weighting and MF-AMP Responses", x = "E-MFD Weights", y = "Mean Reported Valence") + ggthemes::theme_few() + theme(legend.title=element_blank()) + xlim(.002, .017)
ggsave(plt, "eMFD_val.png", dpi = 300, scale = 2)
?ggsave
ggsave(plot = plt, filename = "eMFD_val.png", dpi = 300, scale = 2)
ggsave(plot = plt, filename = "eMFD_val.png", dpi = 300, scale = 2, width = 6, height = 4)
ggsave(plot = plt, filename = "eMFD_val.png", dpi = 300, scale = 2, width = 6, height = 4)
